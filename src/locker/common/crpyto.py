"""A thin wrapper around cryptography"""

from pathlib import Path
from datetime import datetime

from cryptography import fernet


def gen_key() -> bytes:
    """Spits out a key generated by fernet.Fernet.generate_key()"""
    return fernet.Fernet.generate_key()


def _write_file(key: str, source_file: Path, dest_dir: Path):
    enc_data = fernet.Fernet(key).encrypt(source_file.read_bytes())
    enc_file = Path(dest_dir, fernet.Fernet(key).encrypt(source_file.name.encode()).decode())
    enc_file.write_bytes(enc_data)


def encryptor(key: str, source: Path, dest: Path | None) -> str:
    """Encrypts a file/folder with the provided key"""
    # Check if the source directory is valid (ie a file, folder)
    if not any([source.is_dir(), source.is_file()]):
        print(f"Source: '{source}' is neither a file or folder, exiting.")
        return 1

    if dest is None:
        dest = Path.cwd()

    # To avoid any potentially horrible consequences, lets make an output folder in the parent
    # output directory. More Path fun....
    actual_ouput_dir = Path(Path(dest).absolute(), datetime.strftime(datetime.now(), "%Y-%m-%d_%H.%M.%S"))
    print(f"Creating parent output directory: {actual_ouput_dir}")
    actual_ouput_dir.absolute().mkdir()

    try:
        key = key.encode()  # Key must be Bytes for fernet
        if source.is_dir():
            for file_path in source.glob("**/*"):
                _write_file(key, file_path, actual_ouput_dir)
        elif source.is_file():
            _write_file(key, source, actual_ouput_dir)
    except Exception as exc:
        print(f"Error returned during encryption: {repr(exc)}")
        if actual_ouput_dir.exists() and not any(actual_ouput_dir.iterdir()):
            print(f"Attempting to remove unused output DIR: {actual_ouput_dir}")
            try:
                actual_ouput_dir.rmdir()  # attempt some form of cleanup
            except:  # Oh Python
                print(f"Failed to remove {actual_ouput_dir}")

        print("Failure.")
        return 1

    print(f"Encrypted files in output dir ({actual_ouput_dir}):")
    for out_file in actual_ouput_dir.iterdir():
        if out_file.is_file():
            print(out_file)
    return 0
